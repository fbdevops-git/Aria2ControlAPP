import tkinter as tk
from tkinter import messagebox
import subprocess
import os
import psutil
import webbrowser
import shutil

class Aria2ControlApp:


    def __init__(self, root):
        self.root = root
        self.root.title("WebUI-Aria2 Controller")
        self.root.geometry("400x220")  # Aumentei a altura para caber mais informações
        self.aria2_process = None
        self.aria2_path = self.find_aria2_path()
        
        # Widgets
        self.label_status = tk.Label(root, text="Status: Verificando...", font=('Arial', 10))
        self.label_status.pack(pady=5)
        
        # Label adicional para informações de instalação
        self.label_install_info = tk.Label(root, text="", font=('Arial', 9), fg="gray")
        self.label_install_info.pack(pady=5)
        
        self.btn_start = tk.Button(root, text="Executar WebUI-Aria2", command=self.start_aria2, 
                                 state=tk.NORMAL if self.aria2_path else tk.DISABLED)
        self.btn_start.pack(pady=5)
        
        self.btn_stop = tk.Button(root, text="Parar Servidor", command=self.stop_aria2, state=tk.DISABLED)
        self.btn_stop.pack(pady=5)
        
        self.btn_exit = tk.Button(root, text="Sair", command=self.try_exit)
        self.btn_exit.pack(pady=5)
        
        # Atualizar status inicial
        self.update_installation_status()
        self.update_status()


    def find_aria2_path(self):
        """Verifica se o aria2 está instalado e retorna o caminho completo (ou None)."""
        # Verifica no PATH primeiro
        aria2_path = shutil.which("aria2c")
        if aria2_path:
            return aria2_path
        
        # Verifica em locais comuns (Windows)
        common_paths = [
            r"C:\ProgramData\chocolatey\bin\aria2c.exe",
            r"C:\Program Files\aria2\aria2c.exe",
            r"C:\aria2\aria2c.exe"
        ]
        for path in common_paths:
            if os.path.exists(path):
                return path
        
        return None
    

    def update_installation_status(self):
        """Atualiza a mensagem sobre a instalação do aria2."""
        if self.aria2_path:
            if self.is_aria2_in_path():
                self.label_install_info.config(text="aria2 encontrado (no PATH do sistema)", fg="green")
            else:
                self.label_install_info.config(text=f"aria2 encontrado em: {self.aria2_path}\n(Adicione ao PATH para melhor compatibilidade)", fg="orange")
        else:
            self.label_install_info.config(text="aria2 NÃO está instalado.\nBaixe em: https://aria2.github.io/", fg="red")
            self.btn_start.config(state=tk.DISABLED)


    def is_aria2_in_path(self):
        """Verifica se o aria2 está no PATH do sistema."""
        return shutil.which("aria2c") is not None


    def is_aria2_running(self):
        """Verifica se o processo aria2c está em execução."""
        for proc in psutil.process_iter(['name']):
            if proc.info['name'] == 'aria2c.exe':
                return True
        return False


    def update_status(self):
        """Atualiza o status de execução do servidor."""
        if self.is_aria2_running():
            self.label_status.config(text="Status: Servidor em execução", fg="green")
            self.btn_start.config(state=tk.DISABLED)
            self.btn_stop.config(state=tk.NORMAL)
        else:
            self.label_status.config(text="Status: Servidor parado", fg="red")
            self.btn_start.config(state=tk.NORMAL if self.aria2_path else tk.DISABLED)
            self.btn_stop.config(state=tk.DISABLED)
        
        self.root.after(2000, self.update_status)


    def start_aria2(self):
        """Inicia o servidor aria2 e abre o WebUI."""
        if not self.aria2_path:
            messagebox.showerror("Erro", "aria2 não encontrado. Instale-o primeiro.\n\nDownload: https://aria2.github.io/")
            return
        
        try:
            self.aria2_process = subprocess.Popen([self.aria2_path, "--enable-rpc", "--rpc-listen-all"])
            webbrowser.open("http://localhost:6800")
            messagebox.showinfo("Sucesso", "Servidor WebUI-Aria2 iniciado!")
        except Exception as e:
            messagebox.showerror("Erro", f"Falha ao iniciar: {str(e)}")

    def stop_aria2(self):
        """Para o servidor aria2."""
        try:
            for proc in psutil.process_iter(['name']):
                if proc.info['name'] == 'aria2c.exe':
                    proc.kill()
            messagebox.showinfo("Sucesso", "Servidor parado com sucesso!")
        except Exception as e:
            messagebox.showerror("Erro", f"Falha ao parar: {str(e)}")

    def try_exit(self):
        """Impede fechar a janela se o aria2 estiver em execução."""
        if self.is_aria2_running():
            messagebox.showwarning("Aviso", "O servidor está em execução. Pare-o antes de sair.")
        else:
            self.root.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = Aria2ControlApp(root)
    root.protocol("WM_DELETE_WINDOW", app.try_exit)
    root.mainloop()